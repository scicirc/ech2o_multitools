#!/bin/bash

res=$(awk '{ if($1 == "CELLSIZE" ) print $2 }' dem.asc)
let srf=$res*$res
echo \#\#\# Cell size \#\#\#
echo $srf
echo

echo
echo \#\#\# Basic site geometry \#\#\#
echo

#echo \#\#\# Convert DEM from .asc to .map
asc2map -a --clone base.map dem.asc DEM.map

#echo \#\#\# Unit map
pcrcalc 'unit.map = DEM.map/DEM.map'
asc2map -a --clone base.map unit.soil_VrtS.asc unit.soil_VrtS.map
asc2map -a --clone base.map unit.soil_VrtD.asc unit.soil_VrtD.map
asc2map -a --clone base.map unit.soil_FrlD.asc unit.soil_FrlD.map
asc2map -a --clone base.map unit.soil_FrlS.asc unit.soil_FrlS.map

#echo \#\#\# Create slope map from DEM map
pcrcalc 'slope.map = slope(DEM.map)'

#echo \#\#\# Delineate channel network
pcrcalc 'ldd.map = lddcreate(DEM.map, 1e9,1e9,1e9,1e9)'

#echo \#\#\# Topography index
pcrcalc 'accuflux.map = accuflux(ldd.map,1)'

echo \#\#\# Soil depth
asc2map -a --clone base.map soildepth.asc soildepth.map
#pcrcalc 'soildepth.map = unit.soil_P.map*6 + +unit.soil_PG.map*4 + unit.soil_PP.map*2.1 +unit.soil_R.map*2.3'

echo \#\#\# Depth of first two soil hydraulic layers
echo \(third is deduced from the total soil depth\)
asc2map -a --clone base.map soildepth.L1.asc soildepth.L1.map
asc2map -a --clone base.map soildepth.L2.asc soildepth.L2.map
pcrcalc 'soildepth.L3.map  = soildepth.map - soildepth.L1.map - soildepth.L2.map'

echo \#\#\# Effective hydraulic conductivity
asc2map -a --clone base.map Khsat.asc Khsat.map
asc2map -a --clone base.map kKhsat.asc kKhsat.map
pcrcalc 'Khsat.L1.map = kKhsat.map*Khsat.map*(1-exp(-soildepth.L1.map/kKhsat.map))/soildepth.L1.map'
pcrcalc 'Khsat.L2.map = kKhsat.map*Khsat.map*(exp(-soildepth.L1.map/kKhsat.map)-exp(-(soildepth.L1.map+soildepth.L2.map)/kKhsat.map))/soildepth.L2.map'
pcrcalc 'Khsat.L3.map = kKhsat.map*Khsat.map*(exp(-(soildepth.L1.map+soildepth.L2.map)/kKhsat.map)-exp(-soildepth.map/kKhsat.map))/soildepth.L3.map'
#pcrcalc 'kKhsat.map = unit.map*10'

echo \#\#\# Porosity
asc2map -a --clone base.map poros.asc poros.map
asc2map -a --clone base.map kporos.asc kporos.map
pcrcalc 'poros.L1.map = kporos.map*poros.map*(1-exp(-soildepth.L1.map/kporos.map))/soildepth.L1.map'
pcrcalc 'poros.L2.map = kporos.map*poros.map*(exp(-soildepth.L1.map/kporos.map)-exp(-(soildepth.L1.map+soildepth.L2.map)/kporos.map))/soildepth.L2.map'
pcrcalc 'poros.L3.map = kporos.map*poros.map*(exp(-(soildepth.L1.map+soildepth.L2.map)/kporos.map)-exp(-soildepth.map/kporos.map))/soildepth.L3.map'

echo \#\#\# V-to-H hydraulic conductivity ratio
asc2map -a --clone base.map KvKh.asc KvKh.map
#pcrcalc 'KvKh.map = unit.map*0.1'

echo \#\#\# Initial soil moisture \in the three layers
pcrcalc 'Init_SWC.L1.map = 0.8*poros.L1.map'
pcrcalc 'Init_SWC.L2.map = 0.8*poros.L2.map'
pcrcalc 'Init_SWC.L3.map = 0.8*poros.L3.map'

echo \#\#\# Soil air entry pressure
asc2map -a --clone base.map psi_ae.asc psi_ae.map

echo \#\#\# Brooks and Corey lambda
asc2map -a --clone base.map BClambda.asc BClambda.map

echo \#\#\# Residual soil moisture
asc2map -a --clone base.map theta_r.asc theta_r.map
pcrcalc 'theta_r.L1.map = min(0.25*poros.L1.map,theta_r.map)'
pcrcalc 'theta_r.L2.map = min(0.25*poros.L2.map,theta_r.map)'
pcrcalc 'theta_r.L3.map = min(0.25*poros.L3.map,theta_r.map)'

echo \#\#\# Preview of field capacity
pcrcalc 'fieldcap.L1.map = ((psi_ae.map/3.36)**(1/BClambda.map))*(poros.L1.map-theta_r.L1.map)+theta_r.L1.map'
pcrcalc 'fieldcap.L2.map = ((psi_ae.map/3.36)**(1/BClambda.map))*(poros.L2.map-theta_r.L2.map)+theta_r.L2.map'
pcrcalc 'fieldcap.L3.map = ((psi_ae.map/3.36)**(1/BClambda.map))*(poros.L3.map-theta_r.L3.map)+theta_r.L3.map'

echo
echo \#\#\# Channel mask
asc2map -a --clone base.map chanmask.asc chanmask.map
asc2map -a --clone base.map chanmask_NaN.asc chanmask_NaN.map

echo \#\#\# Channel width
#asc2map -a --clone base.map chanwidth.asc chanwidth.map
pcrcalc 'chanwidth.map=if(chanmask.map eq 1 then unit.map else 0)'

#echo \#\#\# Percent of root \in first two layers
#pcrcalc 'Kroot.map = unit.map*20'

echo \#\#\# Leakance through bedrock
pcrcalc 'leakance.map = unit.map * 0.0'

echo \#\#\# Channel\'s Manning coefficient
pcrcalc 'chanmanningn.map = chanmask.map * 50'
#pcrcalc 'chanmanningn_50.map = chanmask.map * 50'
# Artifically high to keep Courant number<=1

echo \#\#\# GW to channel seepage parameter
#pcrcalc 'chanparam.map = chanmask_NaN.map * 0.005'
pcrcalc 'chanparam.map = chanmask_NaN.map * 0'

echo 
echo \#\#\# Location of time series point \#\#\#
col2map --clone base.map tsmask.txt Tsmask.map
#col2map --clone base.map probes_Outlet.txt Tsmask_Outlet.map

echo \#\#\# Albedo
pcrcalc 'albedo.soil.map = unit.map * 0.3'
#asc2map -a --clone base.map albedo.asc albedo.map

echo \#\#\# Emissivity
pcrcalc 'emissivity.map = unit.map * 0.98'

echo \#\#\# Soil heat capacity
pcrcalc 'soilheatcap.map = unit.map * 1.2e6'

echo \#\#\# Soil thermal conductivity
pcrcalc 'soilthermalK.map = unit.map * 1'

echo \#\#\# Soil depth with negligible heat exchange
pcrcalc 'dampdepth.map = unit.map * 2'

echo \#\#\# Temperature at damping depth
pcrcalc 'temp_damp.map = unit.map * 10'

echo \#\#\# Snowmelt coefficient
pcrcalc 'snowmeltCoeff.map = unit.map * 4.1e-8'

echo \#\#\# Terrain rugosity
pcrcalc 'randrough.map = unit.map * 0.05'

echo \#\#\# Other soil parameters
pcrcalc 'Wc.map = unit.map * 0.7'
pcrcalc 'Wp.map = unit.map * 9'

echo \#\#\# Snow water equivalent
pcrcalc 'Init_SWE.map = unit.map * 0'

echo \#\#\# Initial soil temperature
pcrcalc 'Init_SoilTemp.map = unit.map * 20'

echo \#\#\# Initial soil temperature
pcrcalc 'Init_Streamflow.map = unit.map * 0'

echo \#\#\# Initial ages
# asc2map -a --clone base.map Age.L1.asc Age.L1.map
# asc2map -a --clone base.map Age.L2.asc Age.L2.map
# asc2map -a --clone base.map Age.L3.asc Age.L3.map
# asc2map -a --clone base.map Age.GW.asc Age.GW.map
# asc2map -a --clone base.map Age.surface.asc Age.surface.map
# asc2map -a --clone base.map Age.snowpack.asc Age.snowpack.map
pcrcalc 'Age.L1.map = unit.map * 0'
pcrcalc 'Age.L2.map = unit.map * 0'
pcrcalc 'Age.L3.map = unit.map * 0'
pcrcalc 'Age.GW.map = unit.map * 0'
pcrcalc 'Age.surface.map = unit.map * 0'
pcrcalc 'Age.snowpack.map = unit.map * 0'
